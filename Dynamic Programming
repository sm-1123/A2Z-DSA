----------------------date:07/06/2024----------------------------------------------
P1:Frog Jump
SOL1:Memoization Approach[TC:O(N),SC:(O(N)for recur stack space + O(N)for dp array)]
import sys
import math
def solve(ind, heights, dp):
    if ind == 0:
        return 0
    if dp[ind] != -1:
        return dp[ind]
    jumpTwo = sys.maxsize
    jumpOne = solve(ind-1, heights, dp) + abs(heights[ind] - heights[ind-1])
    if ind > 1:
        jumpTwo = solve(ind-2, heights, dp) + abs(heights[ind] - heights[ind-2])
    dp[ind] = min(jumpOne, jumpTwo)
    return dp[ind]

if __name__ == "__main__":
    heights = [int(x) for x in input("enter height separated by spaces: ").split()]
    n = len(heights)
    dp = [-1] * n
    print(solve(n-1, heights, dp))

SOL2:Tabulation Approach[TC:O(N),SC:O(N)only array space]
import sys
import math
def main():
    heights = [int(x) for x in input("enter height separated by spaces: ").split()]
    n = len(heights)
    dp = [-1 for _ in range(n)]
    dp[0] = 0
    for ind in range(1,n):
        jumpTwo = float('inf')
        jumpOne = dp[ind-1] + abs(heights[ind] - heights[ind-1])
        if ind > 1:
            jumpTwo = dp[ind-2] + abs(heights[ind] - heights[ind-2])
        dp[ind] = min(jumpOne, jumpTwo)
    print(dp[n-1])

if __name__ == "__main__":
    main()

SOL3:Space Optimization Approach[TC:O(N),O(1)]
import sys
import math
def main():
    heights = [int(x) for x in input("enter height separated by spaces: ").split()]
    n = len(heights)
    prev = 0
    prev2 = 0
    for i in range(1,n):
        jumpTwo = sys.maxsize
        jumpOne = prev + abs(heights[i] - heights[i-1])
        if i > 1:
            jumpTwo = prev2 + abs(heights[i] - heights[i-2])
        curr_i = min(jumpOne, jumpTwo)
        prev2 = prev
        prev = curr_i
    print(prev)

if __name__ == "__main__":
    main()

P2:Minimal Cost
Memoization Approach-[TC:O(N*K),SC:O(N)]
import sys
def solveUtil(height, ind, k, dp):
    if ind == 0:
        return 0
    if dp[ind] != -1:
        return dp[ind]
    mmSteps = sys.maxsize
    for j in range(1,k+1):
        if ind - j >= 0:
            jump = solveUtil(height, ind-j, k, dp) + abs(height[ind] - height[ind-j])
            mmSteps = min(jump, mmSteps)
    dp[ind] = mmSteps
    return mmSteps

def solve(height, n, k):
    dp = [-1] * n
    return solveUtil(height, n-1, k, dp)
def main():
    height = [int(x) for x in input("enter height separated by spaces: ").split()]
    n = len(height)
    k = int(input("enter k value: "))
    print(solve(height, n, k))

if __name__ == "__main__":
    main()

Tabulation Approach:[TC:O(N*K),SC:O(N)]
import sys
def solveUtil(height, n, k, dp):
    dp[0] = 0

    for i in range(1,n):
        mmSteps = sys.maxsize
        for j in range(1,k+1):
            if i - j >= 0:
                jump = dp[i-j] + abs(height[i] - height[i-j])
                mmSteps = min(jump, mmSteps)
            dp[i] = mmSteps
    return dp[n-1]

def solve(height, n, k):
    dp = [-sys.maxsize] * n
    return solveUtil(height, n, k, dp)
def main():
    height = [int(x) for x in input("enter height separated by spaces: ").split()]
    n = len(height)
    k = int(input("enter k value: "))
    result = solve(height, n, k)
    print(result)

if __name__ == "__main__":
    main()

--------------------------------date:09/06/2024---------------------------------
P3:Maximum sum of non-adjacent elements (DP 5)[TC:O(N),SC:O(N)+O(N)---O(N)]....

M1:Memoization Approach

import sys

def solveUtil(nums, ind, dp):

    if dp[ind] != -1:
        return dp[ind]

    if ind == 0:
        return nums[ind]

    if ind < 0:
        return 0

    pick = nums[ind] + solveUtil(nums, ind-2, dp)

    nonPick = 0 + solveUtil(nums, ind-1, dp)

    dp[ind] = max(pick, nonPick)

    return dp[ind]

def solve(nums, n):

    dp = [-1] * n

    return solveUtil(nums, n-1, dp)
def main():

    nums = [int(x) for x in input("enter nums separated by spaces: ").split()]

    n = len(nums)

    result = solve(nums, n)

    print(result)

if __name__ == "__main__":

    main()

M2:Tabulation Approach[TC:O(N)Iterative Loop,SC:O(N)Array of size n+1]

import sys

def solveUtil(nums, n, dp):

    dp[0] = nums[0]

    for i in range(1, n):

        pick = nums[i]

        if i > 1:

            pick += dp[i-2]

        nonPick = 0 + dp[i-1]

        dp[i] = max(pick, nonPick)

    return dp[n-1]

def solve(nums, n):

    dp = [-1] * n

    return solveUtil(nums, n, dp)
def main():

    nums = [int(x) for x in input("enter nums separated by spaces: ").split()]

    n = len(nums)

    result = solve(nums, n)

    print(result)

if __name__ == "__main__":

    main()

M3:Space Optimization[TC:O(N)-iterative loop,SC:O(1)]

import sys

def solve(nums, n):

    prev = nums[0]

    prev2 = 0

    for i in range(1, n):

        pick = nums[i]

        if i > 1:

            pick += prev2

        nonPick = 0 + prev

        curr_i = max(pick, nonPick)

        prev2 = prev

        prev = curr_i

    return prev

def main():

    nums = [int(x) for x in input("enter nums separated by spaces: ").split()]

    n = len(nums)

    result = solve(nums, n)

    print(result)

if __name__ == "__main__":

    main()

P4:House Robber 2:[TC;O(N) + O(N)..Two times iter loop, SC:O(1)]

import sys
def solve(nums):

    n = len(nums)

    if n == 0:

        return 0

    if n == 1:

        return nums[0]

    prev = nums[0]

    prev2 = 0

    for i in range(1, n):

        pick = nums[i]

        if i > 1:

            pick += prev2

        nonPick = 0 + prev

        curr_i = max(pick, nonPick)

        prev2 = prev

        prev = curr_i

    return prev

def robStreet(nums, n):

    arr1 = []

    arr2 = []

    if n == 1:

        return nums[0]

    for i in range(n):

        if i != 0:

            arr1.append(nums[i])

        if i != n-1:

            arr2.append(nums[i])

        ans1 = solve(arr1)

        ans2 = solve(arr2)

    return max(ans1, ans2)
def main():

    nums = [int(x) for x in input("enter nums separated by spaces: ").split()]

    n = len(nums)

    result = robStreet(nums, n)

    print(result)

if __name__ == "__main__":

    main()

---------------date:10/06/2024-------------------------------------------
P5:Ninja's Training

Memoization Apporach[TC:O(N*4*3),SC:O(N)+O(N*4)]

import sys
class Solution:

    def f(self, day, last, points, dp):

        if dp[day][last] != -1:

            return dp[day][last]

        if day == 0:

            maxi = 0

            for i in range(3):

                if i != last:

                    maxi = max(maxi, points[0][i])

            dp[day][last] = maxi

            return dp[day][last]

        maxi = 0

        for i in range(3):

            if i != last:

                activity = points[day][i] + self.f(day-1, i, points, dp)

                maxi = max(maxi, activity)

        dp[day][last] = maxi

        return dp[day][last]

    def maximumPoints(self, points, n):

        dp = [[-1 for j in range(4)] for i in range(n)]

        return self.f(n-1, 3, points, dp)

if __name__ == "__main__":

    t = int(input("Enter number of test cases: "))

    for _ in range(t):

        n = int(input())

        points = [list(map(int, input().split())) for _ in range(n)]

        ob = Solution()

        print(ob.maximumPoints(points, n))

M2:Space Optimization[TC:O(N*4*3),SC:O(4)]

import sys

class Solution:
    def maximumPoints(self, points, n):

        prev = [0] * 4

        prev[0] = max(points[0][1], points[0][2])

        prev[1] = max(points[0][0], points[0][2])

        prev[2] = max(points[0][0], points[0][1])

        prev[3] = max(points[0][0], points[0][1], points[0][2])

        for day in range(1, n):

            temp = [0] * 4

            for last in range(4):

                temp[last] = 0

                for task in range(3):

                    if task != last:

                        activity = points[day][task] + prev[task]

                        temp[last] = max(temp[last], activity)


            prev = temp


        return prev[3]

if __name__ == "__main__":

    t = int(input("Enter number of test cases: "))

    for _ in range(t):

        n = int(input())

        points = [list(map(int, input().split())) for _ in range(n)]

        ob = Solution()

        print(ob.maximumPoints(points, n))

P6:Grid Unique Paths

M3:Space Optimization[TC:O(M*N),SC:O(N)]

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:

        prev = [0] * n

        for i in range(m):

            temp = [0] * n

            for j in range(n):

                if i == 0 and j == 0:

                    temp[j] = 1

                    continue

                up = 0

                left = 0

                if i > 0:

                    up = prev[j]

                if j > 0:

                    left = temp[j-1]

                temp[j] = up + left

            prev = temp

        return prev[n-1]        

P7:Grid Unique Paths 2 [TC:O(M*N),SC:O(N)]

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:

        n = len(obstacleGrid)

        m = len(obstacleGrid[0])

        prev = [0] * m

        for i in range(n):

            temp = [0] * m

            for j in range(m):

                if obstacleGrid[i][j] == 1:

                    temp[j] = 0

                    continue

                else:
                    
                    if i == 0 and j == 0:

                        temp[j] = 1

                        continue

                    else:

                        up = 0

                        left = 0
                        
                        if i > 0:

                            up = prev[j]

                        if j > 0:

                            left = temp[j-1]

                        temp[j] = up + left

            prev = temp

        return prev[m-1]                      
        
P8:Minimum Path Sum In a Grid

Space Optimization[TC:O(M*N),SC:O(N)]

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:

        n = len(grid)

        m = len(grid[0])

        prev = [0] * m

        for i in range(n):

            temp = [0] * m

            for j in range(m):

                if i == 0 and j == 0:

                    temp[j] = grid[i][j]

                else:    

                    up = grid[i][j]

                    if i > 0:

                        up += prev[j]

                    else:

                        up = int(1e9)

                    left = grid[i][j]

                    if j > 0:

                        left += temp[j-1]

                    else:

                        left = int(1e9)

                    temp[j] = min(up, left)

            prev = temp

        return prev[m-1]                    

------------------------------date:11/06/2024------------------------------------------
P9:Triangle

SPACE OPTIMIZATION[TC:O(N*N),SC:O(N)]

def minimumPathSum(triangle, n):

    front = [0] * n

    curr = [0] * n

    for j in range(n):

        front[j] = triangle[n-1][j]

    for i in range(n-2, -1, -1):

        for j in range(i+1):

            down = triangle[i][j] + front[j]

            diag = triangle[i][j] + front[j+1]

            curr[j] = min(down, diag)

        front = curr

    return front[0]        

    # Write your code here.

P10:Minimum/Maximum Falling Path Sum

SPACE OPTIMIZATON[TC:O(N*M),SC:O(M)]

def getMaxPathSum(matrix):

    n = len(matrix)

    m = len(matrix[0])

    prev = [0] * m

    curr = [0] * m

    for j in range(m):

        prev[j] = matrix[0][j]

    for i in range(1, n):

        for j in range(m):

            up = matrix[i][j] + prev[j]

            leftDiag = matrix[i][j]

            if j - 1 >= 0:

                leftDiag += prev[j - 1]

            else:

                leftDiag = -int(1e9)

            rightDiag = matrix[i][j]

            if j + 1 < m:

                rightDiag += prev[j + 1]

            else:

                rightDiag = -int(1e9)

            curr[j] = max(up, max(leftDiag, rightDiag))

        prev = curr[:]    

    maxi = -sys.maxsize

    for j in range(m):

        maxi = max(maxi, prev[j])

    return maxi

P11:Ninja and his friends

SPACE OPTIMIZATION[TC:O(N*M*M),SC:O(M*M)]

def maximumChocolates(r: int, c: int, grid: List[List[int]]) -> int:

    front = [[0] * c for _ in range(c)]

    curr = [[0] * c for _ in range(c)]

    for j1 in range(c):

        for j2 in range(c):

            if j1 == j2:

                front[j1][j2] = grid[r-1][j1]

            else:

                front[j1][j2] = grid[r-1][j1] + grid[r-1][j2]

    for i in range(r-2, -1, -1):

        for j1 in range(c):

            for j2 in range(c):

                maxi = -sys.maxsize

                for di in range(-1,2):

                    for dj in range(-1,2):

                        ans = 0

                        if j1 == j2:

                            ans = grid[i][j2]

                        else:

                            ans = grid[i][j1] + grid[i][j2]

                        if ((j1 + di < 0 or j1 + di >= c) or (j2 + dj < 0 or j2 + dj >= c)):

                            ans += int(-1e9)

                        else:

                            ans += front[j1 + di][j2 + dj]

                        maxi = max(ans, maxi)

                curr[j1][j2] = maxi

        front = [row[:] for row in curr]

    return front[0][c-1]                    

    # write your code here
    pass
-------------------------------date:12/06/2024---------------------------------------
P12:Subset sum equal to target

SPACE OPTIMIZATION[TC:O(N*K),SC:O(K)]

def subsetSumToK(n, k, arr):

    prev = [False] * (k+1)

    prev[0] = True

    if arr[0] <= k:

        prev[arr[0]] = True

    for ind in range(1,n):

        curr = [False] * (k+1)

        curr[0] = True

        for target in range(1, k+1):

            notTaken = prev[target]

            taken = False

            if arr[ind] <= target:

                taken = prev[target - arr[ind]]

            curr[target] = notTaken or taken

        prev = curr

    return prev[k]            

    # Write your code here
    # Return a boolean variable 'True' or 'False' denoting the answer

P13:Partition Equal Subset Sum

SPACE OPTIMIZATION[TC:O(N*K)+O(N),SC:O(K)]

def canPartition(arr, n):

    totalSum = sum(arr)

    if totalSum % 2 == 1:

        return False

    else:

        k = totalSum // 2

        prev = [False] * (k + 1)

        prev[0] = True

        if arr[0] <= k:

            prev[arr[0]] = True

        for ind in range(1, n):

            curr = [False] * (k + 1)

            curr[0] = True

            for target in range(1, k+1):

                notTaken = prev[target]

                taken = False

                if arr[ind] <= target:

                    taken = prev[target - arr[ind]]

                curr[target] = taken or notTaken

            prev = curr

        return prev[k]            
    # Write your code here.
    pass

P14:Array partition with minimum difference

space optimization [TC:O(N*totSum)+O(N)+O(N),SC:O(totSum)]

def minSubsetSumDifference(arr: List[str], n: int) -> int:

    totSum = sum(arr)

    prev = [False] * (totSum + 1)

    prev[0] = True

    if arr[0] <= totSum:

        prev[arr[0]] = True

    for ind in range(1,n):

        curr = [False] * (totSum + 1)

        curr[0] = True

        for target in range(1, totSum+1):

            notTaken = prev[target]

            if arr[ind] <= target:

                taken = prev[target - arr[ind]]

            else:

                taken = False

            curr[target] = notTaken or taken

        prev = curr

    mini = int(1e9)

    for i in range(totSum + 1):

        if prev[i]:

            diff = abs(i - (totSum - i))

            mini = min(mini, diff)

    return mini                        
    # write your code here
    pass

P15:Count Subsets with Sum K

SPACE OPTIMIZATION[TC:O(N*K),SC:O(K)]

def findWays(arr: List[int], k: int) -> int:

    n = len(arr)

    prev = [0 for i in range(k+1)]

    prev[0] = 1

    if arr[0] <= k:

        prev[arr[0]] = 1

    for ind in range(1,n):

        curr = [0 for i in range(k+1)]

        curr[0] = 1

        for target in range(1, k+1):

            notTaken = prev[target]

            taken = 0

            if arr[ind] <= target:

                taken = prev[target - arr[ind]]

            curr[target] = notTaken + taken

        prev = curr

    return prev[k]                
    # Write your code here.
    pass

P16:Partitions With Given Difference

space optimization[TC:O(N*K),SC:O(K)]

from typing import List

MOD = int(1e9+7)

def findWays(num, tar):

    n = len(num)

    prev = [0] * (tar + 1)

    if num[0] == 0:

        prev[0] = 2

    else:

        prev[0] = 1

    if num[0] != 0 and num[0] <= tar:

        prev[num[0]] = 1

    for ind in range(1,n):

        curr = [0] * (tar + 1)

        for target in range(tar + 1):

            notTaken = prev[target]

            taken = 0

            if num[ind] <= target:

                taken = prev[target - num[ind]]

            curr[target] = (taken + notTaken) % MOD

        prev = curr

    return prev[tar]    


def countPartitions(n: int, d: int, arr: List[int]) -> int:

    totalSum = 0

    for i in range(n):

        totalSum += arr[i]

    if totalSum - d < 0 or (totalSum - d) % 2:

        return 0

    return findWays(arr, (totalSum-d)//2)        
    # write your code here
    pass

----------------date:14/06/2024-----------------------------------------------------

P17:0 1 Knapsack[SPACE OPTIMIZATION TC:O(N*W),SC:O(W)]

class solution:

    def k(self, n, val, wt, W):

        dp = [0 for i in range(W+1)]

        for i in range(1, n+1):

            for w in range(W, 0, -1):

                if wt[i-1] <= w:

                    dp[w] = max(dp[w], dp[w-wt[i-1]]+val[i-1])

        return dp[W]       

def takeInput():

    T = int(input())

    for _ in range(T):

        N = int(input())

        weights = list(map(int, input().split()))

        values = list(map(int, input().split()))

        W = int(input())

 

        if len(weights)!=N or len(values)!=N:

            print("Error: The number of weights and values should be equal to N.")

            continue

 

        max_value = solution().k(N, values, weights, W)

        print(max_value)

 

if __name__ == "__main__":

    takeInput()         

P18:Minimum Elements[SPACE OPTIMIZATION TC:O(N*X),SC:O(X)]

def minimumElements(num: List[int], x: int) -> int:

    n = len(num)

    prev = [0] * (x + 1)

    curr = [0] * (x + 1)

    for i in range(0, x+1):

        if i % num[0] == 0:

            prev[i] = i // num[0]

        else:

            prev[i] = int(1e9)

    for ind in range(1, n):

        for target in range(x+1):

            notTake = prev[target]

            take = int(1e9)

            if num[ind] <= target:

                take = 1 + prev[target - num[ind]]

            curr[target] = min(notTake, take)

        prev = curr

    ans = prev[x]

    if ans >= int(1e9):

        return -1

    return ans  

------------------------date:15/06/2024----------------------------------------------
P19:Ways To Make Coin Change[SPACE OPTIMIZATION-TC:O(N*T),SC:O(T)]

def countWaysToMakeChange(denominations, value) :

    n = len(denominations)

    prev = [0] * (value + 1)

    for i in range(value+1):

        if i % denominations[0] == 0:

            prev[i] = 1

    for ind in range(1,n):

        curr = [0] * (value+1)

        for target in range(value+1):

            notTaken = prev[target]

            taken = 0

            if denominations[ind] <= target:

                taken = curr[target - denominations[ind]]

            curr[target] = notTaken + taken

        prev = curr

    return prev[value]      

P20:Unbounded Knapsack[SPACE OPTIMIZATION-TC:O(N*W),SC:O(W)]

def unboundedKnapsack(n: int, w: int, profit: List[int], weight: List[int]) -> int:

    curr = [0] * (w + 1)

    for i in range(weight[0], w+1):

        curr[i] = (i//weight[0])*profit[0]

    for ind in range(1,n):

        for cap in range(w+1):

            notTaken = curr[cap]

            taken = -sys.maxsize

            if weight[ind] <= cap:

                taken = profit[ind] + curr[cap - weight[ind]]

            curr[cap] = max(notTaken, taken)

    return curr[w]  

P21: Longest Common Subsequence[SO-TC:O(M*N),SC:O(M)]

def getLengthOfLCS(str1, str2):

   n = len(str1)

   m = len(str2)

   prev = [0] * (m + 1)

   cur = [0] * (m + 1)

   for idx1 in range(1, n + 1):

      for idx2 in range(1, m + 1):

         if str1[idx1 - 1] == str2[idx2 - 1]:

            cur[idx2] = 1 + prev[idx2 - 1]

         else:

            cur[idx2] = max(cur[idx2 - 1], prev[idx2])

      prev = cur.copy()

   return cur[m]

    # Write your code here.
    
P22:Longest Common Substring[SPACE OPTIMIZATION-TC:O(M*N),SC:O(M)]

def lcs(str1: str, str2: str) -> int:

    n = len(str1)

    m = len(str2)

    prev = [0 for i in range(m+1)]

    curr = [0 for i in range(m+1)]

    ans = 0

    for i in range(1,n+1):

        for j in range(1, m+1):

            if str1[i-1] == str2[j-1]:

                val = 1 + prev[j-1]

                curr[j] = val

                ans = max(ans, val)

            else:

                curr[j] = 0

        prev = curr[:]     

    return ans           

P23:Longest Palindromic Subsequence[SPACE OPTIMIZATION-TC:O(N*N),SC:O(N)]

def longestPalindromeSubsequence(s):

    r = s[::-1]

    curr = [0] * (len(r) + 1)

    prev = [0] * (len(r) + 1)

    for i in range(1, len(s)+1):

        for j in range(1, len(r)+1):

            if s[i-1] == r[j-1]:

                curr[j] = 1 + prev[j-1]

            else:

                curr[j] = max(curr[j-1], prev[j])

        prev = curr[:]

    return curr[-1]            

P24:Minimum Number of Deletions and Insertions[SPACE OPTIMIZATION-TC:O(M*N),SC:O(M)]

def canYouMake(s1: str, s2: str) -> int:

    m = len(s1)

    n = len(s2)
 
    
    dp = [[0] * (n + 1) for _ in range(m + 1)]
 
    for i in range(1, m + 1):

        for j in range(1, n + 1):

            if s1[i - 1] == s2[j - 1]:
                
                dp[i][j] = dp[i - 1][j - 1] + 1
                
            else:
                
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
 
    return (m+n)-(2*dp[m][n])

P25:Minimum insertions to make string palindrome [SPACE OPTIMIZATION-TC:O(N*M),SC:O(M)]

class Solution:

    def lcs(self,s1, s2):

        n = len(s1)

        m = len(s2)

        prev = [0] * (m + 1)

        cur = [0] * (m + 1)


        for ind1 in range(1, n + 1):

            for ind2 in range(1, m + 1):

                if s1[ind1 - 1] == s2[ind2 - 1]:

                    cur[ind2] = 1 + prev[ind2 - 1]

                else:

                    cur[ind2] = max(prev[ind2], cur[ind2 - 1])

            prev = cur[:]

        return prev[m]

    def longestPS(self,s):

        t = s

        s = s[::-1]

        return self.lcs(s,t)

    def minInsertions(self, s: str) -> int:

        n = len(s)

        k = self.longestPS(s)

        return n - k
-----------------------date:16/06/2024-----------------------------------------------
P26:Distinct Subsequences[TC:O(N*M),SC:O(M)]

class Solution:

    def numDistinct(self, s: str, t: str) -> int:

        n = len(s)

        m = len(t)

        prev = [0 for i in range(m + 1)]

        prev[0] = 1

        for i in range(1, n + 1):

            for j in range(m, 0, -1):

                if s[i - 1] == t[j - 1]:

                    prev[j] = prev[j - 1] + prev[j]

                else:

                    prev[j] = prev[j]

        return prev[m]                
