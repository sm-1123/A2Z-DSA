----------------------date:07/06/2024----------------------------------------------
P1:Frog Jump
SOL1:Memoization Approach[TC:O(N),SC:(O(N)for recur stack space + O(N)for dp array)]
import sys
import math
def solve(ind, heights, dp):
    if ind == 0:
        return 0
    if dp[ind] != -1:
        return dp[ind]
    jumpTwo = sys.maxsize
    jumpOne = solve(ind-1, heights, dp) + abs(heights[ind] - heights[ind-1])
    if ind > 1:
        jumpTwo = solve(ind-2, heights, dp) + abs(heights[ind] - heights[ind-2])
    dp[ind] = min(jumpOne, jumpTwo)
    return dp[ind]

if __name__ == "__main__":
    heights = [int(x) for x in input("enter height separated by spaces: ").split()]
    n = len(heights)
    dp = [-1] * n
    print(solve(n-1, heights, dp))

SOL2:Tabulation Approach[TC:O(N),SC:O(N)only array space]
import sys
import math
def main():
    heights = [int(x) for x in input("enter height separated by spaces: ").split()]
    n = len(heights)
    dp = [-1 for _ in range(n)]
    dp[0] = 0
    for ind in range(1,n):
        jumpTwo = float('inf')
        jumpOne = dp[ind-1] + abs(heights[ind] - heights[ind-1])
        if ind > 1:
            jumpTwo = dp[ind-2] + abs(heights[ind] - heights[ind-2])
        dp[ind] = min(jumpOne, jumpTwo)
    print(dp[n-1])

if __name__ == "__main__":
    main()

SOL3:Space Optimization Approach[TC:O(N),O(1)]
import sys
import math
def main():
    heights = [int(x) for x in input("enter height separated by spaces: ").split()]
    n = len(heights)
    prev = 0
    prev2 = 0
    for i in range(1,n):
        jumpTwo = sys.maxsize
        jumpOne = prev + abs(heights[i] - heights[i-1])
        if i > 1:
            jumpTwo = prev2 + abs(heights[i] - heights[i-2])
        curr_i = min(jumpOne, jumpTwo)
        prev2 = prev
        prev = curr_i
    print(prev)

if __name__ == "__main__":
    main()

P2:Minimal Cost
Memoization Approach-[TC:O(N*K),SC:O(N)]
import sys
def solveUtil(height, ind, k, dp):
    if ind == 0:
        return 0
    if dp[ind] != -1:
        return dp[ind]
    mmSteps = sys.maxsize
    for j in range(1,k+1):
        if ind - j >= 0:
            jump = solveUtil(height, ind-j, k, dp) + abs(height[ind] - height[ind-j])
            mmSteps = min(jump, mmSteps)
    dp[ind] = mmSteps
    return mmSteps

def solve(height, n, k):
    dp = [-1] * n
    return solveUtil(height, n-1, k, dp)
def main():
    height = [int(x) for x in input("enter height separated by spaces: ").split()]
    n = len(height)
    k = int(input("enter k value: "))
    print(solve(height, n, k))

if __name__ == "__main__":
    main()
